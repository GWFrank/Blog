I"3w<h2 id="tldr">TLDR</h2>

<p>今年(109-1)計概單班的期末專題(其實應該只算是一次作業？)是做一個黑白棋Agent，我和隊友用minimax + 神經網路做的evaluation實做，最後在31組中拿下第一名，對所有其他組都有超過0.5的勝率。這篇文章將會稍微紀錄一下開發的過程和一些心得及想法。</p>

<!--more-->

<h2 id="initial-plan">Initial Plan</h2>

<p>在這次project之前我並沒有開發過類似的東西，所以完全是第一次的嘗試。一開始先隨便丟了幾個想法，然後找有沒有人做過類似的東西，找到了<a href="https://reurl.cc/d5j9yV">棋類AI(以五子棋為例)</a>、<a href="https://reurl.cc/m9j7M1">電腦黑白棋</a>、<a href="https://reurl.cc/9XYxvn">A Genetic Algorithm to Improve an Othello Program</a>。這幾個都是用minimax當基底做的，到這裡我們也大概確定接下來會是做minimax，evaluation function先做最簡單的查表，再看看有什麼可以改良的。</p>

<h2 id="basic-minimax">Basic Minimax</h2>

<h3 id="理論">理論(?)</h3>

<p>首先來簡單講一下minimax在做什麼。理想上，minimax會把整個遊戲樹都算好，接著從遊戲樹的底端往上，白方選擇會對白方最有利的位置下棋，黑棋則反之，一路推回去後就知道哪個位置是最佳的策略。但是因為計算時間有限，30秒內要把黑白棋全部都算完近乎不可能，我們必須要設定搜尋深度的上限。當搜尋到了上限的深度時，必須使用一個函數(evaluation function)為目前的盤面打分數來取代繼續往下搜尋。這個分數必須要能很好的反應出佔有優勢的一方，也就是(在我們的實做中)分數越高表示白棋越可能贏，分數越低表示黑棋越可能贏。</p>

<h3 id="實做">實做</h3>

<p>實做的第一步是刻一個找出合法下棋位置的function，這裡沒有用什麼特別的演算法來做。有測試過使用<code class="language-plaintext highlighter-rouge">set</code>和<code class="language-plaintext highlighter-rouge">list</code>紀錄合法位置的速度，最後發現是<code class="language-plaintext highlighter-rouge">list</code>快一點點，但其實沒有顯著的影響。另外原本是用2d的<code class="language-plaintext highlighter-rouge">list</code>當作棋盤做搜尋，後面改用1d的可以加快一些(大約多搜一層)。</p>

<p>再來是實際刻Minimax。這部份其實是隊友刻的，照他所述他就是把wikipedia上面的psuedo code翻成python再修改一下而已。Evaluation function這時候是用在前面提到的論文內的一個表，將棋子以那張表加權後相加，計算盤面分數。</p>

<h2 id="improvements">Improvements</h2>

<p>最初未經改良的Minimax要在時間限制內完成比賽大概只能搜尋3層而已。用python的<code class="language-plaintext highlighter-rouge">cProfile</code>工具，抓出搜尋合法位置的<code class="language-plaintext highlighter-rouge">getAvailableSpot()</code>佔用不少時間，稍加優化後能多搜尋一層。</p>

<p>另一個優化的點是使用Alpha-Beta剪枝，這個剪枝的核心思想是如果「目前這條分支的最佳可能情況」比前面已經得到的「其他分之的最佳情況」還糟的話，就不用繼續搜尋下去。這個優化又讓我們能夠多搜尋一層，搜尋5層時可以10秒完成一場比賽，搜尋6層時壓線在25秒內完成。最後的程式碼大概如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">minimax_adj</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">,</span> <span class="n">eval_func</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">depth</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="n">eval_func</span><span class="p">(</span><span class="n">obs</span><span class="p">)</span>

    <span class="n">moves</span> <span class="o">=</span> <span class="n">getAvailableSpot</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">color</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
        <span class="n">bestmove</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">moves</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c1"># no move, proceed to other player
</span>            <span class="n">_</span> <span class="p">,</span><span class="n">newValue</span> <span class="o">=</span> <span class="n">minimax</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="o">-</span><span class="n">color</span><span class="p">,</span> <span class="n">depth</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">newValue</span> <span class="o">&gt;</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span>
        <span class="k">for</span> <span class="n">move</span> <span class="ow">in</span> <span class="n">moves</span><span class="p">:</span>
            <span class="n">newBoard</span> <span class="o">=</span> <span class="n">makeMove</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="n">move</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
            <span class="n">_</span> <span class="p">,</span><span class="n">newValue</span> <span class="o">=</span> <span class="n">minimax</span><span class="p">(</span><span class="n">newBoard</span><span class="p">,</span> <span class="o">-</span><span class="n">color</span><span class="p">,</span> <span class="n">depth</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">newValue</span> <span class="o">&gt;</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span>
                <span class="n">bestmove</span> <span class="o">=</span> <span class="n">move</span>
            <span class="n">alpha</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">beta</span> <span class="o">&lt;=</span> <span class="n">alpha</span><span class="p">:</span>
                <span class="k">break</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
        <span class="n">bestmove</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">moves</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">_</span><span class="p">,</span> <span class="n">newValue</span> <span class="o">=</span> <span class="n">minimax</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="o">-</span><span class="n">color</span><span class="p">,</span> <span class="n">depth</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">newValue</span> <span class="o">&lt;</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span>
        <span class="k">for</span> <span class="n">move</span> <span class="ow">in</span> <span class="n">moves</span><span class="p">:</span>
            <span class="n">newBoard</span> <span class="o">=</span> <span class="n">makeMove</span><span class="p">(</span><span class="n">obs</span><span class="p">,</span> <span class="n">move</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span>
            <span class="n">_</span><span class="p">,</span> <span class="n">newValue</span> <span class="o">=</span> <span class="n">minimax</span><span class="p">(</span><span class="n">newBoard</span><span class="p">,</span> <span class="o">-</span><span class="n">color</span><span class="p">,</span> <span class="n">depth</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">newValue</span> <span class="o">&lt;</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span>
                <span class="n">bestmove</span> <span class="o">=</span> <span class="n">move</span>
            <span class="n">beta</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">beta</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">beta</span> <span class="o">&lt;=</span> <span class="n">alpha</span><span class="p">:</span>
                <span class="k">break</span>
    <span class="k">return</span> <span class="n">bestmove</span><span class="p">,</span> <span class="n">value</span>
</code></pre></div></div>

<p>有一個做到一半最後沒有完成的優化是Zobrist hash+查表，因為棋盤有左右、上下、旋轉對稱，有些搜尋可能會重複，利用Zobrist hash建一個棋盤盤面對應走法的hash table。或是利用TA提供的4GB空間放，先行把搜尋深度更深的結果存好，實際運行時先在資料庫中搜尋，搜尋不到時再實際跑minimax。</p>

<h2 id="a-neat-approach">A “NEAT” Approach</h2>

<p>在這個project的最後一週其實已經都做的差不多了，我們能對minimax做的優化都已經做了，剩下evaluation有努力的空間。我就想到之前看的Youtube頻道<a href="https://www.youtube.com/c/CodeBullet/featured">Code Bullet</a>裡面，用神經網路+基因演算法做了很多遊戲的agent，經過一點研究後知道他是用<a href="https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies">NEAT</a>。既然我們用的是python，那應該有人已經寫好了NEAT相關的套件，於是找到了<a href="https://neat-python.readthedocs.io/en/latest/">neat-python</a>。再來就是找看看有沒有人做了這個套件的教學，於是找到了<a href="https://www.youtube.com/watch?v=MMxFDaIOHsE&amp;list=PLzMcBGfZo4-lwGZWXz5Qgta_YNX3_vLS2">Tech With Tim的這個系列</a>。</p>

<p>接下來就是寫一個讓兩個agent對打多場的function。為了提高效率，在這裡我用<code class="language-plaintext highlighter-rouge">multiprocessing</code>模組達到平行運算，硬體則有系上工作站，單一系統共12個thread。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">matchup_mp</span><span class="p">(</span><span class="n">agent1</span><span class="p">,</span> <span class="n">agent2</span><span class="p">,</span> <span class="n">rounds</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">process_num</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">balanced</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="s">"""multiprocess version of matchup()
    Args:
        agent1
        agent2
        rounds (int): how many rounds of game (each going first)
    
    Returns:
        tuple: ((agent1.s_depth, agent1_wins), (agent2.s_depth, agent2_wins), draws)
    """</span>
    
    <span class="n">agent1_w</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">agent2_w</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">draw</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="c1"># agent 1 go first as black
</span>    <span class="n">pool</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="n">Pool</span><span class="p">(</span><span class="n">process_num</span><span class="p">)</span>
    
    <span class="n">args</span> <span class="o">=</span> <span class="p">[(</span><span class="n">agent1</span><span class="p">,</span> <span class="n">agent2</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">rounds</span><span class="p">)]</span>
    <span class="n">game_results</span> <span class="o">=</span> <span class="n">pool</span><span class="p">.</span><span class="n">starmap</span><span class="p">(</span><span class="n">playgame</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>

    <span class="n">pool</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
    
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">game_results</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">agent2_w</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">agent1_w</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">draw</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="c1"># agent 2 go first as black
</span>    <span class="k">if</span> <span class="n">balanced</span><span class="p">:</span>
        <span class="n">pool</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="n">Pool</span><span class="p">(</span><span class="n">process_num</span><span class="p">)</span>
        
        <span class="n">args</span> <span class="o">=</span> <span class="p">[(</span><span class="n">agent2</span><span class="p">,</span> <span class="n">agent1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">rounds</span><span class="p">)]</span>
        <span class="n">game_results</span> <span class="o">=</span> <span class="n">pool</span><span class="p">.</span><span class="n">starmap</span><span class="p">(</span><span class="n">playgame</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>

        <span class="n">pool</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
        <span class="n">pool</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">game_results</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">agent1_w</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">agent2_w</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">draw</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="n">agent1</span><span class="p">.</span><span class="n">win</span> <span class="o">+=</span> <span class="n">agent1_w</span>
    <span class="n">agent1</span><span class="p">.</span><span class="n">loss</span> <span class="o">+=</span> <span class="n">agent2_w</span>
    <span class="n">agent1</span><span class="p">.</span><span class="n">draw</span> <span class="o">+=</span> <span class="n">draw</span>

    <span class="n">agent2</span><span class="p">.</span><span class="n">win</span> <span class="o">+=</span> <span class="n">agent2_w</span>
    <span class="n">agent2</span><span class="p">.</span><span class="n">loss</span> <span class="o">+=</span> <span class="n">agent1_w</span>
    <span class="n">agent2</span><span class="p">.</span><span class="n">draw</span> <span class="o">+=</span> <span class="n">draw</span>

    <span class="k">return</span> <span class="n">agent1_w</span><span class="o">/</span><span class="p">(</span><span class="n">rounds</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>我們獲得每個神經網路的fitness的方式是讓那個agent和一個target agent對打很多場，用勝率當fitness。神經網路有64個輸入，是棋盤的64個位置，白棋=1、黑棋=-1。神經網路的輸出則是作為evaluation用。在測試fitness的過程中，為了減少每一個generation的時間，神經網路搭配的agent是只搜尋1層的minimax agent。</p>

<p>但在run generation時我們發現一個奇怪的現象，當target agent是隨機下棋的時候，第一個generation就會有勝率高達0.9的神經網路了。受限於可以使用的計算力和時間，我們只有跑200個generation，在這200個generation中，平均的勝率幾乎沒有成長，不管target agent用的是random agent或是我們已經寫好的agent。但是所剩的時間不多，沒辦法再回去看測量fitness的地方有沒有寫錯，只能先把得到的神經網路先拿來跟原本的比看看。</p>

<h2 id="results">Results</h2>

<p>因為Minimax做出來的agent缺乏隨機性，而且evaluation難以做到完美，考量到其他組可能不會加隨機性，我們決定測試兩種添加隨機的方法。第一種是設定前<code class="language-plaintext highlighter-rouge">n</code>步完全隨機下，第二種是每一步都有<code class="language-plaintext highlighter-rouge">p</code>的機率會隨機下。</p>

<p>採用第一種隨機性的agent我們稱之為<code class="language-plaintext highlighter-rouge">BasicMinimaxAgent</code>，採用第二種的我們稱之為<code class="language-plaintext highlighter-rouge">LittleRandomAgent</code>。<code class="language-plaintext highlighter-rouge">p</code>的值是人為評估得到的，考慮每盤棋大約會下32步，我們希望他其中一步隨機走就好，因為這一步可能是開局、中盤或尾盤，如此可以得到<code class="language-plaintext highlighter-rouge">p=0.03</code>。<code class="language-plaintext highlighter-rouge">n</code>則只是隨便選的。下面是他們兩個對上<code class="language-plaintext highlighter-rouge">RandomAgent</code>的成績。</p>

<p><strong><code class="language-plaintext highlighter-rouge">BasicMinimaxAgent</code> (先手, <code class="language-plaintext highlighter-rouge">n=4</code>) vs <code class="language-plaintext highlighter-rouge">RandomAgent</code></strong></p>

<table>
  <thead>
    <tr>
      <th>Depth</th>
      <th style="text-align: right">1</th>
      <th style="text-align: right">2</th>
      <th style="text-align: right">3</th>
      <th style="text-align: right">4</th>
      <th style="text-align: right">5</th>
      <th style="text-align: right">6</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Games</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">2000</td>
    </tr>
    <tr>
      <td>Wins</td>
      <td style="text-align: right">4404</td>
      <td style="text-align: right">4689</td>
      <td style="text-align: right">4841</td>
      <td style="text-align: right">4921</td>
      <td style="text-align: right">4954</td>
      <td style="text-align: right">1993</td>
    </tr>
    <tr>
      <td>Win%</td>
      <td style="text-align: right">.881</td>
      <td style="text-align: right">.938</td>
      <td style="text-align: right">.968</td>
      <td style="text-align: right">.984</td>
      <td style="text-align: right">.991</td>
      <td style="text-align: right">.997</td>
    </tr>
    <tr>
      <td>Sigma</td>
      <td style="text-align: right">.0046</td>
      <td style="text-align: right">.0034</td>
      <td style="text-align: right">.0025</td>
      <td style="text-align: right">.0018</td>
      <td style="text-align: right">.0014</td>
      <td style="text-align: right">.0013</td>
    </tr>
    <tr>
      <td>Win% - Sigma</td>
      <td style="text-align: right">.876</td>
      <td style="text-align: right">.934</td>
      <td style="text-align: right">.966</td>
      <td style="text-align: right">.982</td>
      <td style="text-align: right">.989</td>
      <td style="text-align: right">.995</td>
    </tr>
    <tr>
      <td>Win% + Sigma</td>
      <td style="text-align: right">.885</td>
      <td style="text-align: right">.941</td>
      <td style="text-align: right">.971</td>
      <td style="text-align: right">.986</td>
      <td style="text-align: right">.992</td>
      <td style="text-align: right">.998</td>
    </tr>
  </tbody>
</table>

<p><strong><code class="language-plaintext highlighter-rouge">LittleRandomAgent</code> (先手, <code class="language-plaintext highlighter-rouge">p=0.03</code>) vs <code class="language-plaintext highlighter-rouge">RandomAgent</code></strong></p>

<table>
  <thead>
    <tr>
      <th>Depth</th>
      <th style="text-align: right">1</th>
      <th style="text-align: right">2</th>
      <th style="text-align: right">3</th>
      <th style="text-align: right">4</th>
      <th style="text-align: right">5</th>
      <th style="text-align: right">6</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Games</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">2000</td>
    </tr>
    <tr>
      <td>Wins</td>
      <td style="text-align: right">4446</td>
      <td style="text-align: right">4640</td>
      <td style="text-align: right">4818</td>
      <td style="text-align: right">4889</td>
      <td style="text-align: right">4951</td>
      <td style="text-align: right">1990</td>
    </tr>
    <tr>
      <td>Win%</td>
      <td style="text-align: right">.889</td>
      <td style="text-align: right">.928</td>
      <td style="text-align: right">.964</td>
      <td style="text-align: right">.978</td>
      <td style="text-align: right">.990</td>
      <td style="text-align: right">.995</td>
    </tr>
    <tr>
      <td>Sigma</td>
      <td style="text-align: right">.0044</td>
      <td style="text-align: right">.0037</td>
      <td style="text-align: right">.0026</td>
      <td style="text-align: right">.0021</td>
      <td style="text-align: right">.0014</td>
      <td style="text-align: right">.0016</td>
    </tr>
    <tr>
      <td>Win% - Sigma</td>
      <td style="text-align: right">.885</td>
      <td style="text-align: right">.924</td>
      <td style="text-align: right">.961</td>
      <td style="text-align: right">.976</td>
      <td style="text-align: right">.989</td>
      <td style="text-align: right">.993</td>
    </tr>
    <tr>
      <td>Win% + Sigma</td>
      <td style="text-align: right">.894</td>
      <td style="text-align: right">.932</td>
      <td style="text-align: right">.966</td>
      <td style="text-align: right">.980</td>
      <td style="text-align: right">.992</td>
      <td style="text-align: right">.997</td>
    </tr>
  </tbody>
</table>

<p>兩者勝率差不多，但由於第二種隨機太不穩定，在實力接近時很可能會搞砸最重要的收尾，最終還是選擇第一種隨機。</p>

<p>再來就是看NEAT能帶來多少幫助，<code class="language-plaintext highlighter-rouge">NEATAgent</code>也添加了第一種隨機性，<code class="language-plaintext highlighter-rouge">n</code>使用同樣的值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">NEATAgent</code> (先手) vs <code class="language-plaintext highlighter-rouge">RandomAgent</code></strong></p>

<table>
  <thead>
    <tr>
      <th>Depth</th>
      <th style="text-align: right">1</th>
      <th style="text-align: right">2</th>
      <th style="text-align: right">3</th>
      <th style="text-align: right">4</th>
      <th style="text-align: right">5</th>
      <th style="text-align: right">6</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Games</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">5000</td>
      <td style="text-align: right">2000</td>
    </tr>
    <tr>
      <td>Wins</td>
      <td style="text-align: right">4423</td>
      <td style="text-align: right">4659</td>
      <td style="text-align: right">4846</td>
      <td style="text-align: right">4926</td>
      <td style="text-align: right">4969</td>
      <td style="text-align: right">1987</td>
    </tr>
    <tr>
      <td>Win%</td>
      <td style="text-align: right">.885</td>
      <td style="text-align: right">.932</td>
      <td style="text-align: right">.969</td>
      <td style="text-align: right">.985</td>
      <td style="text-align: right">.994</td>
      <td style="text-align: right">.994</td>
    </tr>
    <tr>
      <td>Sigma</td>
      <td style="text-align: right">.0045</td>
      <td style="text-align: right">.0036</td>
      <td style="text-align: right">.0024</td>
      <td style="text-align: right">.0017</td>
      <td style="text-align: right">.0011</td>
      <td style="text-align: right">.0018</td>
    </tr>
    <tr>
      <td>Win% - Sigma</td>
      <td style="text-align: right">.880</td>
      <td style="text-align: right">.928</td>
      <td style="text-align: right">.967</td>
      <td style="text-align: right">.983</td>
      <td style="text-align: right">.993</td>
      <td style="text-align: right">.992</td>
    </tr>
    <tr>
      <td>Win% + Sigma</td>
      <td style="text-align: right">.889</td>
      <td style="text-align: right">.935</td>
      <td style="text-align: right">.972</td>
      <td style="text-align: right">.987</td>
      <td style="text-align: right">.995</td>
      <td style="text-align: right">.995</td>
    </tr>
  </tbody>
</table>

<p>看起來和<code class="language-plaintext highlighter-rouge">BasicMinimaxAgent</code>無太大差別。</p>

<p>為了從兩個裡選出一個作為代表的agent，讓他們對打10000場輪流先攻，結果如下：</p>

<p><strong><code class="language-plaintext highlighter-rouge">NEATAgent</code> vs <code class="language-plaintext highlighter-rouge">BasicMinimaxAgent</code></strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">NEAT Wins</th>
      <th style="text-align: right">Basic Minimax Wins</th>
      <th style="text-align: right">Draw</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">5002</td>
      <td style="text-align: right">4784</td>
      <td style="text-align: right">214</td>
    </tr>
  </tbody>
</table>

<p>看來NEAT還是稍微好一點，但沒有壓倒性的勝利。</p>

<h2 id="conclusion">Conclusion</h2>

<p>最後我們繳交的是<code class="language-plaintext highlighter-rouge">NEATAgent</code>, <code class="language-plaintext highlighter-rouge">n=2</code>，將<code class="language-plaintext highlighter-rouge">n</code>降低是因為在和黑白棋遊戲的電腦測試時，發現<code class="language-plaintext highlighter-rouge">n=4</code>還是會不穩。從最終和全班其他31組的對戰結果看來，這次還算是成功的。在各種先後攻的組合中只有對上其中兩隊且我方先攻時勝率僅0.5x，其他都大於0.7。拿去和三、四種黑白棋遊戲的電腦玩家對打，對上最高難度幾乎都能贏。但是我覺得能加強的地方應該還有很多，用先建好的資料庫+查詢也許可以讓棋力更加強悍。</p>
:ET